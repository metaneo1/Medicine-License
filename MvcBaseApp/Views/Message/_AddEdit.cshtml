@using System.Drawing
@using System.Web.UI.WebControls
@using MvcBaseApp.Controllers
@using MvcBaseApp.Resources
@using DataModel
@using DataModel.DataTypeConverters

@model Message

@{
    var datamodel = (MessageAddEditModel)ViewBag.MODEL;
}

@Html.DevExpress().FormLayout(settings =>
{
    settings.Name = "AddMessageFormLayout";
    settings.AlignItemCaptionsInAllGroups = true;
    settings.Items.AddGroupItem(g =>
    {
        g.Caption = Labels.Message_MainInfo;
        g.ColCount = 1;
        //g.Items.Add(m => m.Id_Parent, i =>
        //{
        //    i.ClientVisible = Html.HasRoleView(Session, "Message_Id_Parent");
        //    i.SetNestedContent(Html.Action("GetLookUp", "Message", new { JsElementName = "Id_Parent_AddMessage", CallerConrtoller = "AddMessage", CurrentValue = Model.Id_Parent }).ToString());
        //}).Caption = Labels.Message_Message;
        g.Items.Add(m => m.MessageText, i =>
        {
            i.ClientVisible = Html.HasRoleView(Session, "Message_MessageText");
            i.NestedExtension().TextBox(tb =>
            {
                tb.Width = Unit.Pixel(250);
                tb.ShowModelErrors = true;
                tb.Properties.ValidationSettings.Display = Display.Dynamic;
                tb.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
                if (!Html.HasRoleEnable(Session, "Message_MessageText"))
                {
                    tb.Enabled = false;
                    tb.Properties.Style.BackColor = Color.LightGray;
                    tb.Properties.Style.ForeColor = Color.Black;
                }
            });
        }).Caption = Labels.Message_MessageText;
        g.Items.Add(m => m.MessageDate, i =>
        {
            i.ClientVisible = Html.HasRoleView(Session, "Message_MessageDate");
            i.NestedExtension().DateEdit(tb =>
            {
                tb.Properties.UseMaskBehavior = true;
                tb.Properties.EditFormat = EditFormat.Custom;
                tb.Properties.EditFormatString = DataTypeFormatter.DateTimeFormat;
                tb.Properties.TimeSectionProperties.Visible = false;
                tb.Width = Unit.Pixel(250);
                tb.ReadOnly = true;
                tb.Properties.ValidationSettings.Display = Display.Dynamic;
                tb.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
                if (!Html.HasRoleEnable(Session, "Message_MessageDate"))
                {
                    tb.Enabled = false;
                    tb.Properties.Style.BackColor = Color.LightGray;
                    tb.Properties.Style.ForeColor = Color.Black;
                }
            });
        }).Caption = Labels.Message_MessageDate;
        g.Items.Add(m => m.Id_QuestionType, i =>
        {
            i.ClientVisible = Html.HasRoleView(Session, "Message_Id_QuestionType");
            i.SetNestedContent(Html.Action("GetLookUp", "QuestionType", new { JsElementName = "Id_QuestionType_AddMessage", CallerConrtoller = "AddMessage", CurrentValue = Model.Id_QuestionType }).ToString());
        }).Caption = Labels.Message_QuestionType;
        //g.Items.Add(m => m.Id_AnswerWriter, i =>
        //       {
        //           i.ClientVisible = Html.HasRoleView(Session, "Message_Id_AnswerWriter");
        //           i.SetNestedContent(Html.Action("GetLookUp", "ApplicationUser", new { JsElementName = "Id_AnswerWriter_AddMessage", CallerConrtoller = "AddMessage", CurrentValue = Model.Id_AnswerWriter }).ToString());
        //       }).Caption = Labels.Message_ApplicationUser;
    });
    settings.Items.AddGroupItem(g =>
    {
        g.Caption = "";
        g.ColCount = 2;
        g.Items.Add(i =>
        {
            i.ShowCaption = DefaultBoolean.False;
            i.NestedExtension().Button(s =>
            {
                s.Name = "saveMessageButton";
                s.Text = Labels.btnSave;
                s.UseSubmitBehavior = false;
                s.Images.Image.Url = Url.Content("~/Content/icons/apply_32x32.png");
                s.ClientSideEvents.Click = "OnSaveMessageClick";
            });
            i.HorizontalAlign = FormLayoutHorizontalAlign.Right;
        });
        g.Items.Add(i =>
        {
            i.ShowCaption = DefaultBoolean.False;
            i.HorizontalAlign = FormLayoutHorizontalAlign.Left;
            i.NestedExtension().Button(s =>
            {
                s.Name = "cancelMessageButton";
                s.Text = Labels.btnCancel;
                s.UseSubmitBehavior = false;
                s.Images.Image.Url = Url.Content("~/Content/icons/cancel_32x32.png");
                s.ClientSideEvents.Click = "OnCancelMessageClick";
            });
        });
    });

}).GetHtml()
