@using System.Web.UI.WebControls
@using MvcBaseApp.Controllers
@using MvcBaseApp.Resources
@using System.Drawing
@using DataModel.DataTypeConverters

@model DataModel.ApplicationUser

@{
}

@Html.DevExpress().FormLayout(settings =>
{
    settings.Name = "AddApplicationUserFormLayout";
    settings.AlignItemCaptionsInAllGroups = true;
    settings.Items.AddGroupItem(g =>
    {
        g.Caption = Labels.ApplicationUser_MainInfo;
        g.ColCount = 1;
        g.Items.Add(i =>
        {
            i.Name = "UserName";
            i.Visible = Model.Id == 0;
            i.NestedExtension().TextBox(tb =>
            {
                tb.Width = Unit.Pixel(250);
                tb.ShowModelErrors = true;
                tb.Properties.ValidationSettings.Display = Display.Dynamic;
                tb.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
            });
        }).Caption = "Логин";
        g.Items.Add(i =>
        {
            i.Name = "Password";
            i.Visible = Model.Id == 0;
            i.NestedExtension().TextBox(tb =>
            {
                tb.Width = Unit.Pixel(250);
                tb.ShowModelErrors = true;
                tb.Properties.ValidationSettings.Display = Display.Dynamic;
                tb.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
                tb.Properties.Password = true;
            });
        }).Caption = "Пароль";
        g.Items.Add(i =>
        {
            i.Name = "PasswordDuplicate";
            i.Visible = Model.Id == 0;
            i.NestedExtension().TextBox(tb =>
            {
                tb.Width = Unit.Pixel(250);
                tb.ShowModelErrors = true;
                tb.Properties.ValidationSettings.Display = Display.Dynamic;
                tb.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
                tb.Properties.Password = true;
            });
        }).Caption = "Повторите пароль";

        g.Items.Add(m => m.FullName, i =>
        {
            i.ClientVisible = Html.HasRoleView(Session, "ApplicationUser_FullName");
            i.NestedExtension().TextBox(tb =>
            {
                tb.Width = Unit.Pixel(250);
                tb.ShowModelErrors = true;
                tb.Properties.ValidationSettings.Display = Display.Dynamic;
                tb.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
                if (!Html.HasRoleEnable(Session, "ApplicationUser_FullName"))
                {
                    tb.Enabled = false;
                    tb.Properties.Style.BackColor = Color.LightGray;
                    tb.Properties.Style.ForeColor = Color.Black;
                }
            });
        }).Caption = Labels.ApplicationUser_FullName;
        g.Items.Add(m => m.phone1, i =>
        {
            i.ClientVisible = Html.HasRoleView(Session, "ApplicationUser_phone1");
            i.NestedExtension().TextBox(tb =>
            {
                tb.Width = Unit.Pixel(250);
                tb.ShowModelErrors = true;
                tb.Properties.ValidationSettings.Display = Display.Dynamic;
                tb.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
                if (!Html.HasRoleEnable(Session, "ApplicationUser_phone1"))
                {
                    tb.Enabled = false;
                    tb.Properties.Style.BackColor = Color.LightGray;
                    tb.Properties.Style.ForeColor = Color.Black;
                }
            });
        }).Caption = Labels.ApplicationUser_phone1;
        g.Items.Add(m => m.phone2, i =>
        {
            i.ClientVisible = Html.HasRoleView(Session, "ApplicationUser_phone2");
            i.NestedExtension().TextBox(tb =>
            {
                tb.Width = Unit.Pixel(250);
                tb.ShowModelErrors = true;
                tb.Properties.ValidationSettings.Display = Display.Dynamic;
                tb.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
                if (!Html.HasRoleEnable(Session, "ApplicationUser_phone2"))
                {
                    tb.Enabled = false;
                    tb.Properties.Style.BackColor = Color.LightGray;
                    tb.Properties.Style.ForeColor = Color.Black;
                }
            });
        }).Caption = Labels.ApplicationUser_phone2;
        g.Items.Add(m => m.email, i =>
        {
            i.ClientVisible = Html.HasRoleView(Session, "ApplicationUser_email");
            i.NestedExtension().TextBox(tb =>
            {
                tb.Width = Unit.Pixel(250);
                tb.ShowModelErrors = true;
                tb.Properties.ValidationSettings.Display = Display.Dynamic;
                //tb.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
                tb.Properties.ValidationSettings.RegularExpression.ValidationExpression = @"\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*";
                if (!Html.HasRoleEnable(Session, "ApplicationUser_email"))
                {
                    tb.Enabled = false;
                    tb.Properties.Style.BackColor = Color.LightGray;
                    tb.Properties.Style.ForeColor = Color.Black;
                }
            });
        }).Caption = Labels.ApplicationUser_email;
        g.Items.Add(m => m.DOB, i =>
        {
            i.NestedExtension().DateEdit(tb =>
            {
                tb.Properties.UseMaskBehavior = true;
                tb.Properties.EditFormat = EditFormat.Custom;
                tb.Properties.EditFormatString = DataTypeFormatter.DateFormat;
                tb.Properties.TimeSectionProperties.Visible = false;
                tb.Width = Unit.Pixel(250);
                tb.Properties.ValidationSettings.Display = Display.Dynamic;
                tb.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
            });
        }).Caption = Labels.ApplicationUser_DOB;

        g.Items.Add(m => m.Id_Sex, i =>
        {
            i.ClientVisible = Html.HasRoleView(Session, "Message_Id_Sex");
            i.SetNestedContent(Html.Action("GetLookUp", "Sex", new { JsElementName = "Id_Sex_AddMessage", CallerConrtoller = "AddMessage", CurrentValue = Model.Id_Sex }).ToString());
        }).Caption = Labels.ApplicationUser_Sex;

    });
    settings.Items.AddGroupItem(g =>
    {
        g.Caption = "";
        g.ColCount = 2;

        g.Items.Add(i =>
        {
            i.ShowCaption = DefaultBoolean.False;
            i.HorizontalAlign = FormLayoutHorizontalAlign.Right;
            i.Width = 150;
            i.NestedExtension().Button(s =>
            {
                s.Name = "applyApplicationUserButton";
                s.Text = Labels.btnSave;
                s.Images.Image.Url = Url.Content("~/Content/icons/apply_32x32.png");
                s.UseSubmitBehavior = false;
                s.ClientSideEvents.Click = "OnSaveApplicationUserClick";
            });
        });
        g.Items.Add(i =>
        {
            i.ShowCaption = DefaultBoolean.False;
            i.HorizontalAlign = FormLayoutHorizontalAlign.Left;
            i.Width = 150;
            i.NestedExtension().Button(s =>
            {
                s.Name = "cancelApplicationUserButton";
                s.Text = Labels.btnCancel;
                s.Images.Image.Url = Url.Content("~/Content/icons/cancel_32x32.png");
                s.UseSubmitBehavior = false;
                s.ClientSideEvents.Click = "OnCancelApplicationUserClick";
            });
        });
    });

}).GetHtml()
