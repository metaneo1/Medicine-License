@using System.Web.UI.WebControls
@using DataModel
@using MvcBaseApp.Controllers
@using MvcBaseApp.Models
@using MvcBaseApp.Resources
@model IndexGridModel<DocumentInRequest>
@{
    Layout = null;
    var idtype = (int)ViewBag.DocumentInRequest_Id_RequestType;
    var id = (int) ViewBag.DocumentInRequest_Id_Request;
    var list = DatabaseProvider.DB.GetDocumentAndRequestElements(idtype, id).ToList();
}

@Html.DevExpress().GridView(
    settings =>
    {
        settings.Name = "gvDocumentInRequestDataBindingToLinq";
        settings.CallbackRouteValues = new { Controller = "DocumentInRequest", Action = "IndexPartial", Id_Request = id};
        settings.KeyFieldName = "Id";
        settings.Width = Unit.Percentage(100);
        settings.EnableRowsCache = true;
        settings.Settings.ShowFilterRow = true;

        if (Html.HasRoleView(Session, Model.EntityName + "_Document.Name"))
        {
            settings.Columns.Add(x =>
            {
                x.Name = "RequestElementTypeName";
                x.FieldName = "RequestElementTypeName";
                x.Caption = "Элемент заявки";//Labels.ResourceManager.GetString(Model.EntityName + "_Document");
                x.CellStyle.Wrap = DefaultBoolean.True;
                x.HeaderStyle.Wrap = DefaultBoolean.True;
            });
        }
        if (Html.HasRoleView(Session, Model.EntityName + "_DocumentState"))
        {
            settings.Columns.Add(x =>
            {
                x.Name = "DocumentStateName";
                x.FieldName = "DocumentStateName";
                x.Caption = Labels.ResourceManager.GetString(Model.EntityName + "_DocumentState");
                x.CellStyle.Wrap = DefaultBoolean.True;
                x.HeaderStyle.Wrap = DefaultBoolean.True;
            });
        }
        if (Html.HasRoleView(Session, Model.EntityName + "_Description"))
        {
            settings.Columns.Add(x =>
            {
                x.Name = "Description";
                x.FieldName = "Description";
                x.Caption = Labels.ResourceManager.GetString(Model.EntityName + "_Description");
                x.CellStyle.Wrap = DefaultBoolean.True;
                x.HeaderStyle.Wrap = DefaultBoolean.True;
            });
        }
        if (Html.HasRoleView(Session, Model.EntityName + "_HasDocument"))
        {
            settings.Columns.Add(x =>
            {
                x.Name = "HasDocument";
                x.FieldName = "HasDocument";
                x.Caption = "Прикреплен";
                x.CellStyle.Wrap = DefaultBoolean.True;
                x.HeaderStyle.Wrap = DefaultBoolean.True;
                x.ColumnType = MVCxGridViewColumnType.CheckBox;
            });
        }
        settings.CustomColumnDisplayText = (sender, e) =>
        {
            if (e.Column.FieldName != "HasDocument") return;
            e.Value = Convert.ToInt32(e.Value) == 0;
        };
        settings.SettingsBehavior.AllowFocusedRow = true;
        settings.ClientSideEvents.FocusedRowChanged = "OnDocumentInRequestGridFocusedRowChanged";
        settings.ClientSideEvents.Init = "resizeGrid";

        settings.PreRender = settings.BeforeGetCallbackResult = (sender, e) =>
        {
            MVCxGridView gridView = sender as MVCxGridView;
            Session["gv" + Model.EntityName + "State"] = new MVCxGridViewState(gridView);
        };

    }).Bind(list).GetHtml()
@*.BindToLINQ(string.Empty, string.Empty, (s, e) =>
{
e.QueryableSource = DatabaseProvider.DB.vw_RequestElementDocumentInRequest;

}).GetHtml()*@