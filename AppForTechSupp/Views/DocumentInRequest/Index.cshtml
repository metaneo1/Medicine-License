@{
    Layout = ((bool?)ViewBag.AJAX) ?? false ? "~/Views/Shared/_Layout.cshtml" : null;

}

@using DataModel
@using MvcBaseApp.Resources
@model MvcBaseApp.Models.IndexGridModel

@if (
Html.HasRoleView(Session, Model.EntityName + "_Id")||
Html.HasRoleView(Session, Model.EntityName + "_Id_Request")||
Html.HasRoleView(Session, Model.EntityName + "_Id_Document")||
Html.HasRoleView(Session, Model.EntityName + "_Id_DocumentState")||
Html.HasRoleView(Session, Model.EntityName + "_Id_RequestElement")||
Html.HasRoleView(Session, Model.EntityName + "_Description")
    )
{
    @Html.Partial("_IndexHeader", Model)

    <script>
        function btnAdd@(Model.EntityName)Click() {
            var needStop = false;
            if (typeof OnBtnAdd@(Model.EntityName)Click !== "undefined") {
                if (OnBtnAdd@(Model.EntityName)Click != null) {
                    needStop = OnBtnAdd@(Model.EntityName)Click();
                }
                if (needStop)
                    return;
            }
            if (isActive == false) {
                $.alert('Нельзя добавить документ на группу');
                return;
            }
            loadNewPage('@Url.Action("AddEdit", Model.EntityName)?id=0' + '&@Html.Raw(Model.AdditionalUrlParamenter)&Id_RequestElement=' + currentRequestTypeId, update@(Model.EntityName)List);
        }
    </script>

    @Html.DevExpress().Button(btnSettings =>
    {
        btnSettings.Name = "btnAdd" + Model.EntityName;
        btnSettings.Text = "";
        btnSettings.ClientSideEvents.Click = "btnAdd" + Model.EntityName + "Click";
        btnSettings.Images.Image.Url = Url.Content("~/Content/icons/add_32x32.png");
        btnSettings.ControlStyle.CssClass = "button";
        btnSettings.UseSubmitBehavior = false;
        btnSettings.ToolTip = Labels.btnAddData;
    }).GetHtml()
@Html.Partial("IndexGrid/_ButtonView", Model)
    <script>
        function btnEdit@(Model.EntityName)Click() {
            var needStop = false;
            if (typeof OnBtnEdit@(Model.EntityName)Click !== "undefined") {
                if (OnBtnEdit@(Model.EntityName)Click != null) {
                    needStop = OnBtnEdit@(Model.EntityName)Click();
                }
                if (needStop)
                    return;
            }

            if ((current@(Model.EntityName)Id == 0 || current@(Model.EntityName)Id == null) && currentRequestTypeId==0) {
                $.alert('@Labels.ErrorNoItemSelected');
                return;
            }
            if (isActive == false) {
                $.alert('Нельзя изменить документ группы');
                return;
            }
            if (hasDocument == false) {
                $.alert('Документ не прикреплен');
                return;
            }
            loadNewPage('@Url.Action("AddEdit", Model.EntityName)?id=' + current@(Model.EntityName)Id + '&@Html.Raw(Model.AdditionalUrlParamenter)&Id_RequestElement' + currentRequestTypeId, update@(Model.EntityName)List);
        }
    </script>

    @Html.DevExpress().Button(btnSettings =>
    {
        btnSettings.Name = "btnEdit" + Model.EntityName;
        btnSettings.Text = "";
        btnSettings.ClientSideEvents.Click = "btnEdit" + Model.EntityName + "Click";
        btnSettings.Images.Image.Url = Url.Content("~/Content/icons/edit_32x32.png");
        btnSettings.ControlStyle.CssClass = "button";
        btnSettings.UseSubmitBehavior = false;
        btnSettings.ToolTip = Labels.btnEditData;
    }).GetHtml()
@Html.Partial("IndexGrid/_ButtonDelete", Model)
@Html.Partial("IndexGrid/_ButtonRefresh", Model)
@Html.Partial("IndexGrid/_ButtonPrint", Model)
@Html.Partial("IndexGrid/_ButtonClose", Model)


    <!-- Variables -->
    <script>
        var current@(Model.EntityName)Id = 0;
        var currentRequestTypeId = @ViewBag.DocumentInRequest_Id_Request;
        var hasDocument = false;
        var isActive = false;
        //var current@(Model.EntityName)Name = '';
    </script>

    <!-- Grid Events-->
    <script>
        function On@(Model.EntityName)GridFocusedRowChanged(s, e) {
            s.GetRowValues(s.GetFocusedRowIndex(), 'Id;Id_RequestElement;HasDocument;IsActive', On@(Model.EntityName)GetRowValues);
        }
        function On@(Model.EntityName)GetRowValues(values) {
            current@(Model.EntityName)Id = values[0];
            currentRequestTypeId = values[1];
            hasDocument = values[2];
            isActive = values[3];
            //current@(Model.EntityName)Name = values[1];
        }
    </script>

    <!-- Private Functions -->
    <script>
        function update@(Model.EntityName)List() {
            hasDocument = false;
            isActive = false;
            current@(Model.EntityName)Id = 0;
            //treeList.PerformCallback({Id_Request: currentRequestTypeId.toString().split("_")[0]});
            $.get('@Url.Action("DataBindingPartial")' + '?@Html.Raw(Model.AdditionalUrlParamenter)&Id_Request='+currentRequestTypeId.toString().split("_")[0],
                function(data) {
                    $('#@(Model.EntityName)List').html(data);
            });
        }

        function OnGetNodeValues(values) {
            current@(Model.EntityName)Id = values[0];
            currentRequestTypeId = values[1];
            hasDocument = values[2];
            isActive = values[3];
        }

        function OnFocusedNodeChangedDocument(s, e) {
           
        }
        function OnNodeClickHandlerDocument(s, e) {
            treeList.GetNodeValues(e.nodeKey, 'Id;Id_RequestElement;HasDocument;IsActive', OnGetNodeValues);
        }
    </script>

    <br />
    <br />

    <div id="@(Model.EntityName)List">

@Html.Partial("_TreeList", (List<GetDocumentAndRequestElements_Result>)ViewBag.TreeListData)
@*@Html.Partial("_Index")*@
    </div>

    <!-- Additional Binding -->
    <script>

        hideBigLoader();

        bindings.push(bind@(Model.EntityName)List);

        function bind@(Model.EntityName)List() {
        }
    </script>
}
else
{
    <!-- Additional Binding -->
    <script>

        hideBigLoader();

        function bind@(Model.EntityName)List() {
        }

        bindings.push(bind@(Model.EntityName)List);


        $.alert('@Labels.NotAccessRights');
        closeLastPage();
    </script>
}
